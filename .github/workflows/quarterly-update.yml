name: TURSAKUR Quarterly Data Update

on:
  schedule:
    # Her 3 ayda bir çalıştır (1 Ocak, 1 Nisan, 1 Temmuz, 1 Ekim - 02:00 UTC)
    - cron: '0 2 1 1,4,7,10 *'
  
  # Manuel tetikleme için
  workflow_dispatch:
    inputs:
      force_update:
        description: 'Zamanından önce güncellemeyi zorla'
        required: false
        default: 'false'
        type: boolean

env:
  PYTHON_VERSION: '3.11'

jobs:
  quarterly-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Repository'yi checkout et
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Python kurulumu
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Bağımlılıkları yükle
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 📁 Gerekli dizinleri oluştur
      run: |
        mkdir -p data/raw
        mkdir -p logs
        mkdir -p backups
    
    - name: 🔧 Git kullanıcı bilgilerini ayarla
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: 🔍 Güncelleme gerekli mi kontrol et
      id: check_update
      run: |
        if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
          echo "update_needed=true" >> $GITHUB_OUTPUT
          echo "🔄 Manuel güncelleme tetiklendi"
        else
          python -c "
          import sys
          sys.path.append('scripts')
          from quarterly_update import QuarterlyUpdater
          updater = QuarterlyUpdater()
          needed = updater.should_run_update()
          print(f'update_needed={str(needed).lower()}')
          " >> $GITHUB_OUTPUT
        fi
    
    - name: 🚀 Üç aylık güncellemeyi çalıştır
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        echo "🔄 Üç aylık veri güncelleme başlatılıyor..."
        python scripts/quarterly_update.py
      continue-on-error: false
    
    - name: 📊 Güncelleme sonuçlarını kontrol et
      if: steps.check_update.outputs.update_needed == 'true'
      id: check_results
      run: |
        if [ -f "data/turkiye_saglik_kuruluslari.json" ]; then
          RECORD_COUNT=$(python -c "
          import json
          with open('data/turkiye_saglik_kuruluslari.json', 'r', encoding='utf-8') as f:
              data = json.load(f)
          print(len(data))
          ")
          echo "record_count=$RECORD_COUNT" >> $GITHUB_OUTPUT
          echo "success=true" >> $GITHUB_OUTPUT
          echo "✅ Güncelleme başarılı: $RECORD_COUNT kayıt"
        else
          echo "success=false" >> $GITHUB_OUTPUT
          echo "❌ Güncelleme başarısız: Ana veri dosyası bulunamadı"
        fi
    
    - name: 📈 GitHub Pages için hazırla
      if: steps.check_update.outputs.update_needed == 'true' && steps.check_results.outputs.success == 'true'
      run: |
        echo "🌐 GitHub Pages için veri hazırlanıyor..."
        
        # Ana veri dosyasını web dizinine kopyala
        cp data/turkiye_saglik_kuruluslari.json web/data/
        
        # Dosya boyutunu kontrol et
        FILE_SIZE=$(stat -c%s "data/turkiye_saglik_kuruluslari.json")
        echo "📊 Veri dosyası boyutu: $(($FILE_SIZE / 1024 / 1024)) MB"
        
        # Sıkıştırılmış versiyon oluştur
        if command -v gzip &> /dev/null; then
          gzip -c data/turkiye_saglik_kuruluslari.json > web/data/turkiye_saglik_kuruluslari.json.gz
          echo "🗜️ Sıkıştırılmış dosya oluşturuldu"
        fi
    
    - name: 📝 Değişiklik raporunu oku
      if: steps.check_update.outputs.update_needed == 'true'
      id: read_report
      run: |
        REPORT_DATE=$(date +%Y-%m-%d)
        REPORT_FILE="logs/quarterly_report_${REPORT_DATE}.txt"
        
        if [ -f "$REPORT_FILE" ]; then
          # Raporu GitHub Actions özet olarak ekle
          echo "## TURSAKUR Üç Aylık Güncelleme Raporu" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
          
          # Rapor içeriğini environment variable olarak ayarla
          {
            echo 'REPORT_CONTENT<<EOF'
            cat "$REPORT_FILE"
            echo EOF
          } >> $GITHUB_ENV
        fi
    
    - name: 📤 Değişiklikleri commit et
      if: steps.check_update.outputs.update_needed == 'true' && steps.check_results.outputs.success == 'true'
      run: |
        # Değişen dosyaları kontrol et
        if git diff --quiet; then
          echo "ℹ️ Commit edilecek değişiklik yok"
        else
          echo "📝 Değişiklikler commit ediliyor..."
          
          # Güncellenmiş dosyaları staging area'ya ekle
          git add data/turkiye_saglik_kuruluslari.json
          git add data/update_metadata.json
          git add web/data/
          git add logs/quarterly_report_*.txt
          
          # Commit mesajını oluştur
          COMMIT_MSG="🔄 Üç aylık veri güncellemesi - $(date '+%Y-%m-%d')

          📊 Kayıt sayısı: ${{ steps.check_results.outputs.record_count }}
          🤖 Otomatik güncelleme
          
          [skip ci]"
          
          git commit -m "$COMMIT_MSG"
          git push
          
          echo "✅ Değişiklikler başarıyla push edildi"
        fi
    
    - name: 🏷️ Release oluştur
      if: steps.check_update.outputs.update_needed == 'true' && steps.check_results.outputs.success == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: data-update-${{ github.run_number }}
        release_name: TURSAKUR Veri Güncellemesi - $(date '+%Y-%m-%d')
        body: |
          ## 🔄 Üç Aylık Otomatik Veri Güncellemesi
          
          **📅 Güncelleme Tarihi:** $(date '+%Y-%m-%d %H:%M:%S UTC')
          **📊 Toplam Kayıt:** ${{ steps.check_results.outputs.record_count }} sağlık kurumu
          **🤖 Güncelleme Tipi:** Otomatik üç aylık güncelleme
          
          ### 📁 Güncellenmiş Dosyalar
          - `data/turkiye_saglik_kuruluslari.json` - Ana veri dosyası
          - `web/data/` - GitHub Pages veri dosyaları
          - Güncelleme raporları
          
          ### 🔗 Bağlantılar
          - [Canlı Web Sitesi](https://tursakur.web.app)
          - [Ana Veri Dosyası](https://github.com/${{ github.repository }}/blob/main/data/turkiye_saglik_kuruluslari.json)
          
          ---
          Bu güncelleme GitHub Actions tarafından otomatik olarak oluşturulmuştur.
        draft: false
        prerelease: false
    
    - name: 🔔 Discord bildirim gönder
      if: steps.check_update.outputs.update_needed == 'true' && steps.check_results.outputs.success == 'true'
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ -n "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
               -d "{
                 \"embeds\": [{
                   \"title\": \"🔄 TURSAKUR Veri Güncellemesi\",
                   \"description\": \"Üç aylık otomatik veri güncellemesi tamamlandı\",
                   \"color\": 3066993,
                   \"fields\": [
                     {\"name\": \"📊 Kayıt Sayısı\", \"value\": \"${{ steps.check_results.outputs.record_count }}\", \"inline\": true},
                     {\"name\": \"📅 Tarih\", \"value\": \"$(date '+%Y-%m-%d')\", \"inline\": true},
                     {\"name\": \"🌐 Web Sitesi\", \"value\": \"[tursakur.web.app](https://tursakur.web.app)\", \"inline\": true}
                   ],
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
                 }]
               }" \
               "$DISCORD_WEBHOOK"
        fi
    
    - name: 📊 İstatistik özeti
      if: steps.check_update.outputs.update_needed == 'true'
      run: |
        echo "## 📈 TURSAKUR Güncelleme Özeti" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **🏥 Toplam Sağlık Kurumu:** ${{ steps.check_results.outputs.record_count || 'Bilinmiyor' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **📅 Güncelleme Tarihi:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "- **🔄 Güncelleme Durumu:** ${{ steps.check_results.outputs.success == 'true' && '✅ Başarılı' || '❌ Başarısız' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **🌐 Web Sitesi:** [tursakur.web.app](https://tursakur.web.app)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ steps.check_results.outputs.success }}" = "true" ]; then
          echo "🎉 Güncelleme başarıyla tamamlandı!" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ Güncelleme sırasında sorunlar oluştu." >> $GITHUB_STEP_SUMMARY
        fi

  # Backup job - başarısız güncellemeler için
  backup-on-failure:
    runs-on: ubuntu-latest
    needs: quarterly-update
    if: failure()
    
    steps:
    - name: ⚠️ Başarısız güncelleme bildirimi
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
      run: |
        if [ -n "$DISCORD_WEBHOOK" ]; then
          curl -H "Content-Type: application/json" \
               -d "{
                 \"embeds\": [{
                   \"title\": \"⚠️ TURSAKUR Güncelleme Hatası\",
                   \"description\": \"Üç aylık otomatik veri güncellemesi başarısız oldu\",
                   \"color\": 15158332,
                   \"fields\": [
                     {\"name\": \"📅 Tarih\", \"value\": \"$(date '+%Y-%m-%d %H:%M:%S UTC')\", \"inline\": true},
                     {\"name\": \"🔗 Detaylar\", \"value\": \"[GitHub Actions](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})\", \"inline\": true}
                   ],
                   \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
                 }]
               }" \
               "$DISCORD_WEBHOOK"
        fi
        
        echo "❌ Güncelleme başarısız oldu - lütfen logları kontrol edin" >> $GITHUB_STEP_SUMMARY
